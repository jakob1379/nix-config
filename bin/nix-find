#!/usr/bin/env bash

# Check if a search term was provided as the first argument
if [ -z "$1" ]; then
  echo "Usage: $(basename "$0") <search-term>" >&2
  exit 1
fi

# Store the search term
search_term="$*"
# search_term="$@"

# Search Nix packages using the provided term.
# Pipe the results to fzf for multi-selection.
# Add a preview showing package details using both name and version.
# Use awk to extract only the package name (before ' @ ').

mapfile -t selected_packages < <(nix-search "$search_term" | \  
                     fzf --multi --preview 'read -r name rest <<< "$(echo {} | sed "s/ @ / /")"; 
                version=$(echo "$rest" | cut -d " " -f1);
                nix-search --details --name "$name" --version "$version"' | \
                     awk -F ' @ ' '{print $1}')

# Check if any package was actually selected in fzf
# Check fzf's exit status (130 means cancelled)
fzf_exit_status=$?
if [ $fzf_exit_status -eq 130 ]; then
  echo "Selection cancelled." >&2
  exit 130
elif [ ${#selected_packages[@]} -eq 0 ]; then # Check if array is empty
  echo "No package selected." >&2
  exit 0 # Exit cleanly, nothing to output
fi

# Print the final nix-shell command to standard output
echo "nix-shell -p" "${selected_packages[@]}"
nix-shell -p "${selected_packages[@]}"
