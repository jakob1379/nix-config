#!/usr/bin/env bash

# This script provides a utility to unzip a specified .zip archive into a directory named after the archive.
# It strictly requires exactly one argument: the path to the .zip archive to be extracted.

set -euo pipefail
IFS=$'\n\t'

displayUsage() {
    echo '
usage:  unzip_d <path_to_zip>
    <path_to_zip>    The path to the .zip file to be extracted.

    Only one argument is allowed. The script extracts the .zip file into a directory named after the file.

Examples:
    unzip_d archive.zip    Extracts archive.zip into a directory named "archive".

Options:
    -h    Shows this help message.
'
}

while getopts ":h" opt; do
    case ${opt} in
	h)
	    displayUsage
	    exit 0
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    displayUsage
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    displayUsage
	    exit 1
	    ;;
    esac
done

shift $((OPTIND-1))

function unzip_d {
    if [[ $# != 1 ]]; then
	echo "Error: This script requires exactly one argument, the path to the .zip file to extract." >&2
	displayUsage
	return 1
    fi
    local archivePath="$1"  # Ensure this variable is always quoted when used
    local target="${archivePath%.zip}"
    if [[ ! -f "$archivePath" ]]; then
	echo "Error: The specified file does not exist or is not a regular file." >&2
	return 1
    fi
    # Use quotes around "$archivePath" and "${target##*/}" to handle spaces and special characters
    unzip "$archivePath" -d "${target##*/}" && echo "Extraction completed: ${target##*/}"
}

unzip_d "$@"
